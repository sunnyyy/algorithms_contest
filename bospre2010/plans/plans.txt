Making Plans
------ -----

You are being asked to make minimal plans.

These plans concern a world that is described by propo-
sitions that are either true or false.  There are 26
possible propositions, one for each lower case letter of
the alphabet.

For each proposition `p' there are two `literals' that
can be used to describe the world: `+p' is a literal
that means proposition p is true, and `-p' is a literal
that means p is false.  The negation of a literal is the
same literal with the sign switched, i.e., -p is the
negation of +p and +p is the negation of -p.

Plans consist of actions.  An action has the form

	name:{pre-conditions}=>{post-conditions}

where `name' is a natural number, pre-conditions is a
list of literals that must be true in order for the
action to be taken, and post-conditions is a list of
literals that will be true after the action has been
taken.  An action is described on a single line which
is written without any spaces; for example:

	7:+p-q=>-p+q+r+t

A set of literals is conflicting if for some p both +p
and -p are in the set.  The pre-conditions of an action
must be non-conflicting, and similarly the post-condi-
tions of an action must be non-conflicting.

A plan is:

(1) A set ACT of actions.
(2) A strict partial order << on the set of actions ACT.
    Intuitively m<<n means m comes before n.
(3) A set of causal links.  A causal link is denoted by
    	m=>n:c
    where m and n are names of actions in ACT, m is an
    action to be taken to satisfy the pre-condition c
    of n, and c is a literal in the post-conditions of
    m and the pre-conditions of n.  m=>n:c necessarily
    implies m<<n.

A strict partial order is a binary relation that is
transitive and anti-symmetric.  Antisymmetry means that
m<<n implies NOT n<<m.

An action b is said to be a `threat' to causal link
m=>n:c if the negation of c is a post-condition of b,
and b does not equal m or n.  If b is a threat to
m=>n:c, then either b<<m or n<<b must be true or the
plan is inconsistent.

In order to define the initial state of the world and
the final or goal state that our plan seeks we introduce
two special actions, the initial action 0 and goal
action 1, which have the forms:

	0:=>{initial-conditions}
	1:{goal-conditions}=>
	
0, the initial action, has empty pre-conditions and its
post-conditions represent the initial state of the
world.  1, the goal action, has empty post-conditions,
and its pre-conditions represent the desired or goal
state of the world.  Every plan must contain the 0 and 1
actions.  0<<1 is required, and 0<<m<<1 is required for
all actions m in the plan other than 0 or 1.

A plan is consistent if its strict partial order is
really a strict partial order and if for every causal
link m=>n:c in the plan and every action b in the plan
that is a threat to that link, either b<<m or n<<b.

A plan is complete if it includes 0 and 1, 0<<1 and for
every other action m in the plan 0<<m<<1, and for every
action n in the plan and every literal c in the pre-con-
dition of n, there is EXACTLY ONE causal link m=>n:c in
the plan.

Note that an action can be used at most once in a plan;
we do NOT permit actions to be replicated.  Also note
that there can be two causal links in a plan of the
forms m=>n:c1 and m=>n:c2; that is, m=>n can appear more
than once in a plan but with DIFFERENT literals c1 and
c2.

You are being asked to find minimal complete, consistent
plans.


Input
-----

For each of several test cases, a line containing just
the test case name, followed by any number of lines
each describing one action, followed by a line contain-
ing just `.'.

There is one action named `0' and one named `1' in each
test case.  All other action names are unique and are
natural numbers.  The smallest natural number N such
that all action names are in the range 0 .. N-1 is
implicitly input and is used to define the output (see
below).

3 <= N <= 200.

There is no whitespace in any input line other than the
test case name line.  Input lines are at most 80 char-
acters long.  Input ends with an end of file.


Output
------

For each test case, first an exact copy of the test case
name line, followed by a description of a minimal con-
sistent complete plan for the test case, or a single
line containing EXACTLY `no plan', meaning that no con-
sistent complete plan is possible for the test case.

The description of a minimal plan begins with N lines
each containing N characters that describe the strict
partial order, followed by lines each describing one
clausal link in the plan, followed by a line con-
taining just `.'  See `Input' above for a definition
of N.

In the N lines describing the strict partial order,
column n of line m is

    '1' if m and n are in the plan and m<<n

    '0' if m and n are in the plan and NOT m<<n

    '0' if either m or n is NOT in the plan

Here lines are numbered 0, 1, 2, ... from top to bottom,
and columns are numbered 0, 1, 2, ... from left to
right.  If no action named m is in the input, m is
treated as an action not in the plan for the purposes
of this paragraph (you can treat m as an action with no
pre- or post-conditions).

The lines describing the causal links each have the
form `m=>n:c'.

There are no spaces in any output lines except test case
name lines and `no plan' lines.

The plan output must be minimal in the following senses.
First, it must contain a minimum number of actions.
Second, among all plans with the minimum number of
actions, it must have the minimum number of clausal
links.  Third, among all plans with the minimum number
of actions and minimum number of clausal links, it must
have the minimum number of << relations (literally, the
minimum number of `1's in the strict partial order de-
scription).


Sample Input
------ -----

-- SAMPLE 1 --
2:+b=>-b+c
3:+c=>-c+d
4:+c=>+f
0:=>+b
1:+d=>
.
-- SAMPLE 2 --
0:=>+c-d
1:-f+c-g=>
2:-h=>+k-a
3:+b=>-m-c
4:+c=>+b-c
5:-d=>+d-f
6:-d+c=>+f+k
7:+f=>+g+b
8:-k+h=>-h+m
9:+g+c=>-f+m
10:+g=>-g-b
.


Sample Output
------ ------

-- SAMPLE 1 --
01110
00000
01010
01000
00000
3=>1:+d
2=>3:+c
0=>2:+b
.
-- SAMPLE 2 --
01000111001
00000000000
00000000000
00000000000
00000000000
01000000000
01000101001
01000100001
00000000000
00000000000
01000000000
0=>1:+c
5=>1:-f
0=>5:-d
10=>1:-g
7=>10:+g
6=>7:+f
0=>6:+c
0=>6:-d
.



File:	   plans.txt
Author:	   Bob Walton <walton@seas.harvard.edu>
Date:	   Thu Oct 14 09:30:13 EDT 2010

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2010/10/14 13:30:40 $
    $RCSfile: plans.txt,v $
    $Revision: 1.9 $