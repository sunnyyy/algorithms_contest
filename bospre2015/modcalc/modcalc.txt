Modulo Calculator
------ ----------

You have been asked to write a calculator for values
that are integers modulo m, for some integer m > 0.
As an initial experiment, you are to perform operations
on these integers and output the results, to see how
the operations behave.

Recall that if 0 <= x and 0 < m, then x modulo m is the
remainder of x divided by m.  For C, C++, and JAVA, it
is x % m.

The set { 0, 1, ..., m-1 } is sometimes denoted by [m].
You are to write a program that has input lines like

    [m] + n

which says add n to each i with 0 <= i < m (i.e., each
i in [m]) and output the result modulo m.  For example,
the line

    [5] + 1

outputs

	[5] + 1: 1 2 3 4 0

while the line

      [5] * 2

outputs

	[5] * 2: 0 2 4 1 3

Input
-----

Lines as follows:

    Line Output for i, 0 <= i < m

    [m] + n	(i + n) modulo m [sum]
    [m] * n	(i * n) modulo m [product]
    [m] ** e	(i ** e) modulo m [exponential]
    	   Recall i ** 0 == 1 and i ** 1 == i.
    [m] -  The unique j such that 0 <= j < m and
    	(i + j) == 0 modulo m.
    [m] /  The unique j such that 0 <= j < m and
    	(i * j) == 1 modulo m, if such a j
	   exists; otherwise output `*'.

In the above m, n, and e are integers with

    1 <= m <= 100    0 <= n < m    0 <= e <= 100

Input ends with an end of file.


Output
------

For each input line, a copy of the input line followed
by a colon and a space and then the outputs for each i,
i == 0 through i == m-1, in order.  Output lines for
larger m will be rather long. 


Sample Input
------ -----

[5] + 0
[5] + 1
[ see sample.in for rest of sample input ]

Sample Output
------ ------

[5] + 0: 0 1 2 3 4
[5] + 1: 1 2 3 4 0
[5] + 2: 2 3 4 0 1
[5] * 0: 0 0 0 0 0
[5] * 1: 0 1 2 3 4
[5] * 2: 0 2 4 1 3
[5] ** 0: 1 1 1 1 1
[5] ** 1: 0 1 2 3 4
[5] ** 2: 0 1 4 4 1
[5] -: 0 4 3 2 1
[5] /: * 1 3 2 4
[10] ** 9: 0 1 2 3 4 5 6 7 8 9
[10] -: 0 9 8 7 6 5 4 3 2 1
[10] /: * 1 * 7 * * * 3 * 9
[11] + 6: 6 7 8 9 10 0 1 2 3 4 5
[11] + 7: 7 8 9 10 0 1 2 3 4 5 6
[11] * 2: 0 2 4 6 8 10 1 3 5 7 9
[11] * 3: 0 3 6 9 1 4 7 10 2 5 8
[11] * 9: 0 9 7 5 3 1 10 8 6 4 2
[11] * 10: 0 10 9 8 7 6 5 4 3 2 1
[11] ** 3: 0 1 8 5 9 4 7 2 6 3 10
[11] ** 8: 0 1 3 5 9 4 4 9 5 3 1
[11] ** 9: 0 1 6 4 3 9 2 8 7 5 10
[11] ** 99: 0 1 6 4 3 9 2 8 7 5 10
[11] ** 10: 0 1 1 1 1 1 1 1 1 1 1
[11] ** 100: 0 1 1 1 1 1 1 1 1 1 1
[11] -: 0 10 9 8 7 6 5 4 3 2 1
[11] /: * 1 6 4 3 9 2 8 7 5 10
[12] ** 10: 0 1 4 9 4 1 0 1 4 9 4 1
[12] ** 11: 0 1 8 3 4 5 0 7 8 9 4 11
[12] /: * 1 * * * 5 * 7 * * * 11
[20] /: * 1 * 7 * * * 3 * 9 * 11 * 17 * * * 13 * 19
[21] /: * 1 11 * 16 17 * * 8 * 19 2 * 13 * * 4 5 * 10 20
[22] /: * 1 * 15 * 9 * 19 * 5 * * * 17 * 3 * 13 * 7 * 21


NOTES:	For 0 <= i < m, it can be shown that there is
	AT MOST ONE j such that 0 <= j < m and i*j == 1
	modulo m.  If j exists, i is said to have a
	multiplicative inverse modulo m.
      
      For a given m, the set of i with a multiplica-
      tive inverse modulo m forms a group with multi-
      plication modulo m as its group operation.
      This group has applications in cryptography.


File:    modcalc.txt
Author:	    Bob Walton <walton@seas.harvard.edu>
Date:	       Fri Oct  2 14:54:11 EDT 2015

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.
