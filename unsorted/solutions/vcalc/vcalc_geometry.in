// Example Geometry Algorithms Programmed in Vcalc
//
// File:	vcalc_geometry.in
// Author:	walton@seas.harvard.edu
// Date:	Wed Jan 16 03:40:07 EST 2013

// See Applications section of 2D Geometry help page.
//
// All coordinates are integers so the Testing Equality
// subsection does not apply.

clear
println //
println // Distance Between Point and Infinite Line
p = (3,4)
p1 = (-5,-5)
p2 = (3, 3)
v = p2 - p1
length_v = || v ||
rv = v ^ 90
p'y = p * rv
p1'y = p1 * rv
p2'y = p2 * rv
not_equal = p1'y != p2'y
if not_equal: println ERROR: p1'y != p2'y
dy = p'y - p1'y
abs_dy = | dy |
dist = abs_dy / length_v
println -- The distance from p
println ---- to the infinite line p1 -- p2
println ---- is dist

clear
println //
print // Distance Between Point and Finite Line Segment
println
p = (3,4)
p1 = (-5,-5)
p2 = (3, 3)
v = p2 - p1
length_v = || v ||
rv = v ^ 90
p'x = p * v
p1'x = p1 * v
p2'x = p2 * v
p'y = p * rv
p1'y = p1 * rv
p2'y = p2 * rv
not_equal = p1'y != p2'y
if not_equal: println ERROR: p1'y != p2'y
dy = p'y - p1'y
abs_dy = | dy |
dist_pp1p2 = abs_dy / length_v
p'x<p1'x = p'x < p1'x
pp1 = p - p1
dist_pp1 = || pp1 ||
p'x>p2'x = p'x > p2'x
pp2 = p - p2
dist_pp2 = || pp2 ||
either = p'x<p1'x || p'x>p2'x
neither = ! either
println -- The distance from p
println ---- to the finite line segment p1 -- p2
if p'x<p1'x: print ---- is the distance from p to p1
if p'x<p1'x: println = dist_pp1
if p'x>p2'x: print ---- is the distance from p to p2
if p'x>p2'x: println = dist_pp2
if neither: println ---- is the distance from p to the
if neither: print ---- infinite line p1 -- p2
if neither: println = dist_pp1p2

clear
println //
println // Sides of an Infinite Line
p = (3,4)
p1 = (-5,-5)
p2 = (3, 3)
v = p2 - p1
rv = v ^ 90
p'y = p * rv
p1'y = p1 * rv
p2'y = p2 * rv
not_equal = p1'y != p2'y
if not_equal: println ERROR: p1'y != p2'y
RIGHT = p'y < p1'y
ON = p'y == p1'y
LEFT = p'y > p1'y
print -- The point p is
if RIGHT: println to the right of
if ON: println on
if LEFT: println to the left of
println ---- the infinite line p1 -- p2

clear
println //
print // Where Does a Finite Line Intersect
println an Infinite Line
p1 = (-5,-5)
p2 = (3, 3)
p3 = (-3,5)
p4 = (3,-1)
v = p2 - p1
rv = v ^ 90
p1'y = p1 * rv
p2'y = p2 * rv
p3'y = p3 * rv
p4'y = p4 * rv
not_equal = p1'y != p2'y
if not_equal: println ERROR: p1'y != p2'y
PARALLEL = p3'y == p4'y
PARALLEL_ON = p1'y == p4'y
PARALLEL_ON = PARALLEL && PARALLEL_ON
PARALLEL_OFF = p1'y != p4'y
PARALLEL_OFF = PARALLEL && PARALLEL_OFF
if PARALLEL: print -- The finite line segment p3 -- p4
if PARALLEL: println is parallel to and
if PARALLEL_OFF: print ---- disjoint from
if PARALLEL_ON: print ---- on
if PARALLEL: println the infinite line p1 -- p2

NOT_PARALLEL = ! PARALLEL
diff14 = p1'y - p4'y
diff34 = p3'y - p4'y
diff14>=0 = diff14 >= 0
diff34>=diff14 = diff34 >= diff14
INTERSECTS+ = diff34>=diff14 && diff14>=0
diff14<=0 = diff14 <= 0
diff34<=diff14 = diff34 <= diff14
INTERSECTS- = diff34<=diff14 && diff14<=0
INTERSECTS = INTERSECTS+ || INTERSECTS-
INTERSECTS = INTERSECTS && NOT_PARALLEL
NOT_INTERSECTS = ! INTERSECTS
NOT_INTERSECTS = NOT_INTERSECTS && NOT_PARALLEL
if INTERSECTS: t = diff14 / diff34
if INTERSECTS: pt = t * p3
if INTERSECTS: s = 1 - t
if INTERSECTS: ps = s * p4
if INTERSECTS: p = pt + ps
if NOT_PARALLEL: print -- The finite line segment
if NOT_PARALLEL: print p3 -- p4
if INTERSECTS: println intersects
if NOT_INTERSECTS: println does NOT intersect
if NOT_PARALLEL: print ---- the infinite line p1 -- p2
if INTERSECTS: println at p
if NOT_INTERSECTS: println
